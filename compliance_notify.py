import os
import json
import smtplib, ssl
import urllib.request
import pandas as pd
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# set script parameters
sender_email = "joshua.croff@gmail.com"
receiver_email = [
    "jcroff@bayareametro.gov",
    "hpeters@bayareametro.gov",
    "hdiaz@bayareametro.gov",
    "lelias@bayareametro.gov",
]
subject = "Jurisdictions with Compliant Housing Elements"
password = os.getenv("GMAIL_PASSKEY")


def send_email(sender_email, sender_password, receiver_email_list, subject, message):
    port = 465  # For SSL
    context = ssl.create_default_context()

    # Create a multipart message
    msg = MIMEMultipart()
    msg["From"] = sender_email
    msg["To"] = ", ".join(receiver_email_list)
    msg["Subject"] = subject
    msg.attach(MIMEText(message, "plain"))

    with smtplib.SMTP_SSL("smtp.gmail.com", port, context=context) as server:
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, receiver_email_list, msg.as_string())


def pull_hcd_compliance_data():
    # pull data in from the API
    county_list = [
        "SAN FRANCISCO",
        "MARIN",
        "SONOMA",
        "NAPA",
        "SOLANO",
        "CONTRA COSTA",
        "ALAMEDA",
        "SANTA CLARA",
        "SAN MATEO",
    ]

    table_id = "2dcd1cd4-1348-4fc5-9c9c-219f82daac00"
    base_url = "https://data.ca.gov"
    url = f"{base_url}/api/3/action/datastore_search?resource_id={table_id}"

    results = []
    total_records = None

    while len(url) > 0:
        print(f"calling {url}")
        fileobj = urllib.request.urlopen(url)
        response_dict = json.loads(fileobj.read())
        records = response_dict["result"]["records"]
        results += records
        if total_records is None:
            total_records = response_dict["result"]["total"]
        if (
            "_links" in response_dict["result"]
            and len(response_dict["result"]["_links"]["next"]) > 0
            and len(results) < total_records
        ):
            api_endpoint = response_dict["result"]["_links"]["next"]
            url = f"{base_url}{api_endpoint}"
        else:
            url = ""

    bay_area_results = [record for record in results if record["County"] in county_list]
    results_df = pd.DataFrame.from_dict(bay_area_results)

    return results_df


def pull_mtc_housing_inventory():
    # get the most recent housing data from hluv
    url = "https://data.bayareametro.gov/resource/r3au-pj2j.csv?$limit=2000000"
    df = pd.read_csv(url)

    # fix jurisdiction names so they matched names in state dataset for comparison
    jurs_dict = {
        "UNINCORPORATED ALAMEDA": "ALAMEDA COUNTY",
        "UNINCORPORATED CONTRA COSTA": "CONTRA COSTA COUNTY",
        "UNINCORPORATED SANTA CLARA": "SANTA CLARA COUNTY",
        "UNINCORPORATED SONOMA": "SONOMA COUNTY",
        "UNINCORPORATED MARIN": "MARIN COUNTY",
        "UNINCORPORATED NAPA": "NAPA COUNTY",
        "UNINCORPORATED SAN MATEO": "SAN MATEO COUNTY",
        "UNINCORPORATED SOLANO": "SOLANO COUNTY",
        "ST HELENA": "SAINT HELENA",
    }

    df["jurisdiction"] = df["jurisdiction"].replace(jurs_dict)

    return df


def compare_hcd_mtc(hcd_df, mtc_df):
    hcd_list = hcd_df[hcd_df["Compliance Status"] == "IN"]["Jurisdiction"].unique().tolist()
    mtc_list = mtc_df["jurisdiction"].unique().tolist()

    # find jurisdictions in the HCD list that are not in the MTC list
    missing_juris = []
    items_to_remove = ["MILL VALLEY", "HEALDSBURG"]
    for jurisdiction in hcd_list:
        if jurisdiction not in mtc_list:
            missing_juris.append(jurisdiction)

    new_list = [item for item in missing_juris if item not in items_to_remove]

    return new_list


def main(sender_email, sender_password, receiver_email_list, subject):
    hcd_df = pull_hcd_compliance_data()
    mtc_df = pull_mtc_housing_inventory()
    missing_jurisdictions = compare_hcd_mtc(hcd_df, mtc_df)

    if len(missing_jurisdictions) == 0:
        print("All jurisdictions with compliant housing elements are in the MTC housing inventory")
        return

    message_template = [
        "Hello,",
        "Hope you are doing well. I've checked the HLUV housing inventory and the state's housing element compliance data and found that the following jurisdictions are not in the MTC housing inventory: \n",
        "{missing_jurisdictions} \n",
        "According to HCD, Mill Valley and Healdsburg were not required to submit a housing sites inventory for the 6th cycle. I've removed them from the list. Please let me know if you have any questions by emailing jcroff@bayareametro.gov. \n",
        "This message was generated by a script. Please do not reply directly to this email. \n",
        "Thanks,",
        "Joshua Croff",
    ]

    # Formatting the missing jurisdictions into a string with each jurisdiction on a new line
    formatted_missing_juris = "\n".join(f"- {juris}" for juris in missing_jurisdictions)

    formatted_message = "\n".join(message_template).format(
        missing_jurisdictions=formatted_missing_juris
    )
    send_email(sender_email, sender_password, receiver_email_list, subject, formatted_message)


# run the main function
main(sender_email, password, receiver_email, subject)
